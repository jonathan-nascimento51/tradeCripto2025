//@version=6
library('ConfluenceEngine', overlay=true)

//=============================================================================
// ConfluenceEngine
//=============================================================================
// This library keeps track of pivot prices, computes Fibonacci levels for each
// pivot and finds confluence zones between those levels.
// Functions:
//    addPivotToHistory(pivot) -> store latest pivot, keeping only last 3
//    groupFiboLevels(pivotList, levelList) -> returns [clusters, weights]
//    drawConfluenceZones(clusters, weights) -> draws horizontal zones
// Each cluster price represents the average level where two or more Fibonacci
// levels are within 0.1%% of each other. The weight is the number of levels
// contributing to that zone.
//=============================================================================

// --- internal storage for pivots and drawing elements
var label[] zoneLabels   = array.new<label>()

//==============================================================================
// addPivotToHistory: stores a new pivot and keeps only the last three values
//------------------------------------------------------------------------------
export addPivotToHistory(float pivot, float[] pivotHistory) =>
    if not na(pivot)
        if array.size(pivotHistory) >= 3
            array.shift(pivotHistory)
        array.push(pivotHistory, pivot)
    pivotHistory

//==============================================================================
// groupFiboLevels: computes Fibonacci levels for each pivot and clusters them
// based on 0.1% price tolerance. It returns two arrays: cluster prices and
// corresponding weights (how many levels formed that cluster).
//------------------------------------------------------------------------------
export groupFiboLevels(float[] pivotList, float[] levelList) =>
    float[] clusters = array.new<float>()
    int[]   weights  = array.new<int>()

    for p = 0 to array.size(pivotList) - 1
        pivot = array.get(pivotList, p)
        for l = 0 to array.size(levelList) - 1
            fibRatio  = array.get(levelList, l)
            fibLevel  = pivot + (close - pivot) * fibRatio
            bool added = false
            for c = 0 to array.size(clusters) - 1
                clusterPrice = array.get(clusters, c)
                if math.abs(fibLevel - clusterPrice) <= fibLevel * 0.001
                    weight      = array.get(weights, c)
                    newPrice    = (clusterPrice * weight + fibLevel) / (weight + 1)
                    array.set(clusters, c, newPrice)
                    array.set(weights,  c, weight + 1)
                    added := true
                    break
            if not added
                array.push(clusters, fibLevel)
                array.push(weights,  1)

    [clusters, weights]

//==============================================================================
// drawConfluenceZones: draws horizontal lines representing each confluence zone
// The line color/intensity is proportional to the cluster weight.
//------------------------------------------------------------------------------
export drawConfluenceZones(float[] clusters, int[] weights, line[]  zoneLines, label[] zoneLabels) =>
    int n = array.size(clusters)

    // ensure we have the same number of drawing objects as clusters
    while array.size(zoneLines) > n
        line.delete(array.pop(zoneLines))
        label.delete(array.pop(zoneLabels))

    while array.size(zoneLines) < n
        array.push(zoneLines, line.new(bar_index, na, bar_index, na, extend=extend.right))
        array.push(zoneLabels, label.new(bar_index, na, text="", style=label.style_label_left, textcolor=color.white, size=size.tiny))

    for i = 0 to n - 1
        float price  = array.get(clusters, i)
        int   weight = array.get(weights, i)
        line  ln     = array.get(zoneLines, i)
        label lb     = array.get(zoneLabels, i)

        color zoneColor = color.new(color.blue, math.max(90 - weight * 20, 0))
        line.set_xy1(ln, bar_index[1], price)
        line.set_xy2(ln, bar_index, price)
        line.set_color(ln, zoneColor)
        line.set_width(ln, 1 + weight)
        line.set_extend(ln, extend.right)

        label.set_xy(lb, bar_index, price)
        label.set_text(lb, str.tostring(weight))
        label.set_color(lb, zoneColor)
        label.set_style(lb, label.style_label_left)
        label.set_textcolor(lb, color.white)

    // return arrays for optional further use
    [zoneLines, zoneLabels]
