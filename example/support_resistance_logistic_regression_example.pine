//@version=6
// =============================================================================
//  Support & Resistance - Logistic Regression
//  Standalone indicator derived from the original logistic regression model.
//  ▸ AVALIAÇÃO: Refinamento visual com foco em clareza e contexto.
//  ▸ By: RefinadorVisualZonasPine
// =============================================================================
import "../libraries/logistic_model_lib.pine" as lm
import "../libraries/sr_zone_utils.pine" as sru
import "../libraries/pivot_utils.pine" as pv
import "../libraries/style_lib.pine" as sty
import "../libraries/sr_manager_lib.pine" as srm

// Retrieve the default style set
sty.Styles styles = sty.getStyles()

indicator("Support/Resistance Logistic Regression", "SR_LogReg", overlay=true, max_lines_count=500, max_labels_count=300)

// Declarar cores globalmente (serão atualizadas via StyleLib)
var color borderColorRes = na
var color borderColorSup = na
var color borderColorValid = na
var color borderColorBroken = na

// ⁕ Subsistemas
srEnabledInput = input.bool(true, "Enable Support/Resistance", group="Subsystems")

// ⁕ Parâmetros S/R
lengthInput = input.int(14, "Pivot Length", group="Support/Resistance")
probThresholdInput = input.float(0.7, "Prob Threshold", minval=0, maxval=1, group="Support/Resistance")
retestCountInput = input.int(1, "Retests to Validate", minval=1, maxval=5, group="Support/Resistance")
volatilityBandATRInput = input.float(0.15, "Volatility Band Width (ATR)", step=0.05, group="Support/Resistance", tooltip="Largura da zona em múltiplos de ATR. Ex: 0.15 = Nível ± (0.15 * ATR)")
rsiThresholdInput = input.float(50, "RSI Threshold", group="Support/Resistance")
retestProbWeightInput = input.float(0.05, "Prob Increase per Retest", step=0.01, group="Support/Resistance")
logW0Input = input.float(1.0, "Logistic Weight 0", group="Support/Resistance")
logW1Input = input.float(1.0, "Logistic Weight 1", group="Support/Resistance")
logW2Input = input.float(1.0, "Logistic Weight 2", group="Support/Resistance")
useTrainedWeightsInput = input.bool(false, "Use Trained Weights", group="Support/Resistance")
weightsStrInput = input.string("", "External Weights w0,w1,w2", group="Support/Resistance", tooltip="Opcional: insira pesos separados por vírgula. Deixe em branco para treinar com o histórico.")
trainRateInput = input.float(0.05, "Train Learning Rate", minval=0.001, step=0.001, group="Support/Resistance")
trainEpochsInput = input.int(50, "Train Epochs", minval=1, group="Support/Resistance")

// ⁕ Estilos – S/R (valores padrão via StyleLib). Using the exported constants
// ensures the defaults are of type `const color`, satisfying `input.color`.
srColorResInput    = input.color(sty.SR_COLOR_RES,    "Resistance (Active Fill)", group="Style – S/R")
srColorSupInput    = input.color(sty.SR_COLOR_SUP,    "Support (Active Fill)",  group="Style – S/R")
srColorValidInput  = input.color(sty.SR_COLOR_VALID,  "Validated Zone",       group="Style – S/R")
srColorBrokenInput = input.color(sty.SR_COLOR_BROKEN, "Broken Zone",          group="Style – S/R")

// REFINAMENTO VISUAL: Inputs para controlar os novos elementos gráficos
showPivotMarkersInput = input.bool(true, "Show S/R Pivot Markers", group="Style – Refinements")

// ─────────────────────────── Estruturas de Dados (UDT) ─────────────────────
const int MAX_SR_ZONES = 30
const int MAX_TRAIN_SAMPLES = 200

var sru.SR_Zone[] sr_zones = array.new<sru.SR_Zone>()

var float[] trainX1 = array.new<float>()
var float[] trainX2 = array.new<float>()
var float[] trainX3 = array.new<float>()
var float[] trainY  = array.new<float>()
// Indicates if the model has already been trained for the current dataset.
var bool trained = false

f_pushSample(float x1, float x2, float x3, float y) =>
    array.push(trainX1, x1)
    array.push(trainX2, x2)
    array.push(trainX3, x3)
    array.push(trainY,  y)
    if array.size(trainY) > MAX_TRAIN_SAMPLES
        array.shift(trainX1)
        array.shift(trainX2)
        array.shift(trainX3)
        array.shift(trainY)

// Determine which weights will be used for the logistic model. If a comma
// separated string is provided via input, parse it. Otherwise, attempt to
// train using the collected pivot history.
var float finalW0 = logW0Input
var float finalW1 = logW1Input
var float finalW2 = logW2Input
var float finalW3 = 0.0

if useTrainedWeightsInput
    if str.length(weightsStrInput) > 0
        string[] parts = str.split(weightsStrInput, ",")
        if array.size(parts) >= 3
            finalW0 := str.tonumber(array.get(parts, 0))
            finalW1 := str.tonumber(array.get(parts, 1))
            finalW2 := str.tonumber(array.get(parts, 2))
            if array.size(parts) >= 4
                finalW3 := str.tonumber(array.get(parts, 3))
        trained := true
    else if (not trained) and array.size(trainY) > 0
        // Continue training from the previous weight state when retraining.
        lm.TrainResult res = lm.gradientDescent(trainX1, trainX2, trainX3, trainY, trainRateInput, trainEpochsInput, finalW0, finalW1, finalW2, finalW3)
        finalW0 := res.w0
        finalW1 := res.w1
        finalW2 := res.w2
        finalW3 := res.w3
        trained := true
else
    finalW0 := logW0Input
    finalW1 := logW1Input
    finalW2 := logW2Input
    finalW3 := 0.0
    trained := false

// ─────────────────────────── Funções de Gerenciamento ────────────────
// --- Lógica de Mercado ---
rsi = ta.rsi(close, lengthInput)
atr = ta.atr(lengthInput)
float volMA = ta.sma(volume, lengthInput)

ph = pv.pivotHigh(high, lengthInput)
pl = pv.pivotLow(low, lengthInput)
ph_prev = pv.pivotHigh(high[1], lengthInput)
pl_prev = pv.pivotLow(low[1], lengthInput)

// --- Estado Global da Origem do Pivô ---
// Flags para marcar se um pivô foi formado na barra atual
bool isPivotHighOrigin = not na(ph) and na(ph_prev)
bool isPivotLowOrigin  = not na(pl) and na(pl_prev)

// --- Lógica de Suporte / Resistência ---
if srEnabledInput
    borderColorRes := color.new(srColorResInput, 75)
    borderColorSup := color.new(srColorSupInput, 75)
    borderColorValid := color.new(srColorValidInput, 50)
    borderColorBroken := color.new(srColorBrokenInput, 85)

    srm.createZone(sr_zones, ph, false, srColorResInput, borderColorRes, rsi, rsiThresholdInput, atr, volMA, close, open, volume, finalW0, finalW1, finalW2, finalW3, probThresholdInput, volatilityBandATRInput, lengthInput, MAX_SR_ZONES)
    srm.createZone(sr_zones, pl, true, srColorSupInput, borderColorSup, rsi, rsiThresholdInput, atr, volMA, close, open, volume, finalW0, finalW1, finalW2, finalW3, probThresholdInput, volatilityBandATRInput, lengthInput, MAX_SR_ZONES)

    for zone in sr_zones
        if zone.status != "Broken"
            bool isRetest = zone.isSupport ? low < zone.level and close >= zone.level : high > zone.level and close <= zone.level
            bool isBroken = zone.isSupport ? close < zone.level : close > zone.level

            if isRetest
                bool validated = sru.handleRetest(zone, retestCountInput, retestProbWeightInput, borderColorValid, srColorValidInput)
                if validated
                    f_pushSample(zone.x1, zone.x2, zone.x3, 1.0)
                    trained := false

            bool isDominant = math.abs(close - open) > atr or volume > volMA
            if isBroken and isDominant
                bool earlyBreak = sru.markBroken(zone, retestCountInput, borderColorBroken, srColorBrokenInput)
                if earlyBreak
                    f_pushSample(zone.x1, zone.x2, zone.x3, 0.0)
                    trained := false

else
    // Garante que os marcadores não sejam plotados se o subsistema estiver desativado
    isPivotHighOrigin := false
    isPivotLowOrigin := false
    sru.clearZones(sr_zones)

// --- Plotagem dos Marcadores de Pivô ---
// Só plota na barra de formação do pivô
plotshape(bar_index >= lengthInput and srEnabledInput and showPivotMarkersInput and isPivotHighOrigin ? ph : na,
          title="PH Marker", style=shape.triangledown, location=location.absolute,
          color=color.new(borderColorRes, 70), size=size.tiny, offset=0)
plotshape(bar_index >= lengthInput and srEnabledInput and showPivotMarkersInput and isPivotLowOrigin ? pl : na,
          title="PL Marker", style=shape.triangleup, location=location.absolute,
          color=color.new(borderColorSup, 70), size=size.tiny, offset=0)
