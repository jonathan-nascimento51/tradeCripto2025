//@version=6
indicator("Auto Fib Extension Refatorado", overlay=true)

// === INPUTS ===
// Pivot settings
depth        = input.int(10, "Pivot Depth", minval=2, tooltip="Bar depth for pivot detection")
// Flip the orientation of the projected extensions
reverse      = input.bool(false, "Reverse Direction", inline="Rev")

// Line extension
extendLeft   = input.bool(false, "Extend Left", inline="Ext")
extendRight  = input.bool(true,  "Extend Right", inline="Ext")
extendMode   = extend.none
if      extendLeft and extendRight
    extendMode := extend.both
else if extendLeft
    extendMode := extend.left
else if extendRight
    extendMode := extend.right

// Display options
showPrices   = input.bool(true,  "Show Prices")
showLevels   = input.bool(true,  "Show Levels")
labelPos     = input.string("Left", "Labels Position", options=["Left","Right"])
valueFormat  = input.string("Values", "Levels Format", options=["Values","Percent"])
alphaBg      = input.int(85,   "Background Transparency", minval=0, maxval=100)

// Thresholds
upperThresh  = input.float(0.236, "Upper Ratio Threshold")
lowerThresh  = input.float(1.0,   "Lower Ratio Threshold")

// Fibonacci ratios and colors
fib00 = input.float(0.0,   "Fib 0.0",   step=0.001, group="Fibonacci Ratios")
fib0236 = input.float(0.236, "Fib 0.236", step=0.001, group="Fibonacci Ratios")
fib0382 = input.float(0.382, "Fib 0.382", step=0.001, group="Fibonacci Ratios")
fib050  = input.float(0.5,   "Fib 0.5",   step=0.001, group="Fibonacci Ratios")
fib0618 = input.float(0.618, "Fib 0.618", step=0.001, group="Fibonacci Ratios")
fib0786 = input.float(0.786, "Fib 0.786", step=0.001, group="Fibonacci Ratios")
fib100  = input.float(1.0,   "Fib 1.0",   step=0.001, group="Fibonacci Ratios")
fib1618 = input.float(1.618, "Fib 1.618", step=0.001, group="Fibonacci Ratios")
fib2618 = input.float(2.618, "Fib 2.618", step=0.001, group="Fibonacci Ratios")

var float[] fibRatios = array.new<float>()
var color[] fibColors = array.new<color>()
var int prevAlphaBg = na

// Allocate the arrays only once and rebuild when transparency changes
if barstate.isfirst or prevAlphaBg != alphaBg
    array.clear(fibRatios)
    array.clear(fibColors)
    array.push(fibRatios, fib00)
    array.push(fibRatios, fib0236)
    array.push(fibRatios, fib0382)
    array.push(fibRatios, fib050)
    array.push(fibRatios, fib0618)
    array.push(fibRatios, fib0786)
    array.push(fibRatios, fib100)
    array.push(fibRatios, fib1618)
    array.push(fibRatios, fib2618)
    array.push(fibColors, color.new(color.blue,     alphaBg))
    array.push(fibColors, color.new(color.teal,     alphaBg))
    array.push(fibColors, color.new(color.green,    alphaBg))
    array.push(fibColors, color.new(color.yellow,   alphaBg))
    array.push(fibColors, color.new(color.orange,   alphaBg))
    array.push(fibColors, color.new(color.fuchsia,  alphaBg))
    array.push(fibColors, color.new(color.gray,     alphaBg))
    array.push(fibColors, color.new(color.red,      alphaBg))
    array.push(fibColors, color.new(color.maroon,   alphaBg))
    prevAlphaBg := alphaBg

// === UTILS ===
// Draw a line or update existing
f_drawLine(_price, _col, _lastLine) =>
    var line newLine = na
    if na(_lastLine)
        newLine := line.new(time, _price, time, _price, color=_col, width=1, extend=extendMode, xloc=xloc.bar_time)
    else
        line.set_xy1(_lastLine, line.get_x1(_lastLine), _price)
        line.set_xy2(_lastLine, line.get_x2(_lastLine), _price)
        newLine := _lastLine
    newLine

// Draw a label or update existing
f_drawLabel(_price, _text, _col, _refLine) =>
    if na(_price)
        na
    x = labelPos == "Left" ? line.get_x1(_refLine) : line.get_x2(_refLine)
    style = labelPos == "Left" ? label.style_label_right : label.style_label_left
    align = labelPos == "Left" ? text.align_right : text.align_left
    textFmt = labelPos == "Left" ? _text + "\n" : "       " + _text + "\n"
    var label lbl = label.new(x, _price, textFmt, textcolor=_col, style=style, textalign=align, color=#00000000, xloc=xloc.bar_time)
    label.set_xy(lbl, x, _price)
    label.set_text(lbl, textFmt)
    lbl

// === PIVOT & FIB CALCULATION ===
f_calculate() =>
    // Detect pivot formation using built-in helpers
    isHighPivot = na(ta.pivothigh(high, depth, depth))
    isLowPivot  = na(ta.pivotlow(low, depth, depth))

    // Track last pivot values and their bar indices
    var float lastHigh = na
    var float lastLow  = na
    var int   lastHighIdx = na
    var int   lastLowIdx  = na
    if isHighPivot
        lastHigh := high[depth]
        lastHighIdx := bar_index - depth
    if isLowPivot
        lastLow  := low[depth]
        lastLowIdx  := bar_index - depth

    // Ensure we have both pivots to build an extension
    if na(lastHigh) or na(lastLow)
        [na, na, na]
    else
        bool isUp = lastLowIdx < lastHighIdx
        float startP = isUp ? lastLow : lastHigh
        float endP   = isUp ? lastHigh : lastLow
        float diff   = math.abs(endP - startP)
<<<<<<< ours
        float sign   = isUp ? 1 : -1
=======
        // Positive orientation when the last movement was upward; reversed if input is set
        float sign   = (isUp ? 1 : -1) * (reverse ? -1 : 1)
>>>>>>> theirs

        // Simple range validity based on thresholds
        bool valid = isUp ?
            (lastLow < endP - diff * lowerThresh or lastLow > endP - diff * upperThresh) :
            (lastHigh > endP + diff * lowerThresh or lastHigh < endP + diff * upperThresh)

        valid ? [endP, diff, sign] : [na, na, na]

[endPrice, span, orient] = f_calculate()

// Show a warning instead of halting execution when there is not enough data
var label warnLbl = na
if barstate.islast and na(endPrice)
    // Display a persistent label on the latest bar
    warnLbl := na(warnLbl) ? label.new(bar_index, close, "Mais hist\u00f3rico\nrequerido",
                                       color=color.new(color.red, 0),
                                       style=label.style_label_down) : warnLbl
    label.set_xy(warnLbl, bar_index, close)
    label.set_text(warnLbl, "Mais hist\u00f3rico\nrequerido")
    alert("Auto Fib Extension requer hist\u00f3rico adicional", alert.freq_once_per_bar_close)
else
    if not na(warnLbl)
        label.delete(warnLbl)
        warnLbl := na

// === DRAW FIB LEVELS ===
var line lastLine = na
var label lastLbl = na
if not na(endPrice) and showLevels
    for i = 0 to array.size(fibRatios) - 1
        ratio = array.get(fibRatios, i)
        lvl   = endPrice + span * orient * ratio
        col   = array.get(fibColors, i)

        // draw lines
        lastLine := f_drawLine(lvl, col, lastLine)

        // draw labels
        if showPrices
            txt = valueFormat == "Percent" ? str.tostring(ratio * 100, "#.#") + "%" : str.tostring(lvl, "#.##")
            lastLbl := f_drawLabel(lvl, txt, col, lastLine)

    // Reset references for next bar
    lastLine := na
    lastLbl  := na
else
    // Clean up drawn objects when levels are hidden or calculation failed
    line.delete(lastLine)
    label.delete(lastLbl)
