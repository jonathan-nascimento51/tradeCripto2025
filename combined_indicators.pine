//@version=6
// =============================================================================
//  Combined S/R + Fib (Volatility Zone v7) - Visual Refinement [Corrected]
//  ▸ AVALIAÇÃO: Refinamento visual com foco em clareza e contexto.
//  ▸ Implementa marcadores de origem para zonas S/R e âncoras Fibonacci.
//  ▸ Melhora o ciclo de vida visual das zonas (Ativa → Validada → Rompida).
//  ▸ Adiciona tooltips contextuais para zonas validadas e de confluência.
//  ▸ By: RefinadorVisualZonasPine
//  ▸ NOTE: This script also incorporates the logistic regression support/resistance
//          logic from `support_resistance_logistic_regression_example.pine`.
// =============================================================================
import jonathanmoletta17/LogisticModelLib/5 as lm
import jonathanmoletta17/SRZoneUtils/4 as sru
import jonathanmoletta17/PivotUtils/4 as pv
import jonathanmoletta17/ConfluenceLib/9 as conf
import jonathanmoletta17/StyleLib/9 as sty
import jonathanmoletta17/FibExtensionLib/3 as fib
import jonathanmoletta17/FiboProjector/2 as fb
import jonathanmoletta17/SRManagerLib/2 as srm
import jonathanmoletta17/ConfBoxLib/2 as cb

// Retrieve centralized styling options. Scripts can still reference the
// individual constants if desired but using this object keeps the code tidy.

indicator("Combined S/R + Fib (Volatility Zone v7) [Corrected]", "teste", overlay=true, max_lines_count=500, max_labels_count=300, max_boxes_count=100)

// Declarar cores globalmente (serão atualizadas via StyleLib)
var color borderColorRes = na
var color borderColorSup = na
var color borderColorValid = na
var color borderColorBroken = na

// ⁕ Subsistemas
srEnabledInput = input.bool(true, "Enable Support/Resistance", group="Subsystems")
fibEnabledInput = input.bool(true, "Enable Fibonacci Extensions", group="Subsystems")
confEnabledInput = input.bool(true, "Enable Confluence Zones", group="Subsystems")

// ⁕ Parâmetros S/R
lengthInput = input.int(14, "Pivot Length", group="Support/Resistance")
probThresholdInput = input.float(0.7, "Prob Threshold", minval=0, maxval=1, group="Support/Resistance")
retestCountInput = input.int(1, "Retests to Validate", minval=1, maxval=5, group="Support/Resistance")
volatilityBandATRInput = input.float(0.15, "Volatility Band Width (ATR)", step=0.05, group="Support/Resistance", tooltip="Largura da zona em múltiplos de ATR. Ex: 0.15 = Nível ± (0.15 * ATR)")
rsiThresholdInput = input.float(50, "RSI Threshold", group="Support/Resistance")
retestProbWeightInput = input.float(0.05, "Prob Increase per Retest", step=0.01, group="Support/Resistance")
logW0Input = input.float(1.0, "Logistic Weight 0", group="Support/Resistance")
logW1Input = input.float(1.0, "Logistic Weight 1", group="Support/Resistance")
logW2Input = input.float(1.0, "Logistic Weight 2", group="Support/Resistance")
useTrainedWeightsInput = input.bool(false, "Use Trained Weights", group="Support/Resistance")
weightsStrInput = input.string("", "External Weights w0,w1,w2", group="Support/Resistance", tooltip="Opcional: insira pesos separados por vírgula. Deixe em branco para treinar com o histórico.")
trainRateInput = input.float(0.05, "Train Learning Rate", minval=0.001, step=0.001, group="Support/Resistance")
trainEpochsInput = input.int(50, "Train Epochs", minval=1, group="Support/Resistance")

// ⁕ Parâmetros de Confluência
confThresholdATRInput = input.float(0.25, "Confluence ATR Threshold", group="Confluence Engine")
confluenceBoxWidthInput = input.int(10, "Confluence Box Width (bars)", minval=1, group="Confluence Engine")
w1Input = input.float(0.4, "Weight - Distance", group="Confluence Engine")
w2Input = input.float(0.3, "Weight - Signal", group="Confluence Engine")
w3Input = input.float(0.2, "Weight - Retests", group="Confluence Engine")
w4Input = input.float(0.1, "Weight - Temporal", group="Confluence Engine")
weightSchemeInput = input.string("linear", "Weight Scheme", options=["linear", "exponential", "logistic"], group="Confluence Engine")
kDistInput = input.float(1.0, "Exp K Dist", group="Confluence Engine")
kTempInput = input.float(1.0, "Exp K Temp", group="Confluence Engine")

// ⁕ Estilos – S/R (valores padrão via StyleLib)
srColorResInput    = input.color(sty.SR_COLOR_RES,    "Resistance (Active Fill)", group="Style – S/R")
srColorSupInput    = input.color(sty.SR_COLOR_SUP,    "Support (Active Fill)",  group="Style – S/R")
srColorValidInput  = input.color(sty.SR_COLOR_VALID,  "Validated Zone",       group="Style – S/R")
srColorBrokenInput = input.color(sty.SR_COLOR_BROKEN, "Broken Zone",          group="Style – S/R")

// ⁕ Estilos – Fibonacci (padrões vindos de StyleLib)
fibBaseColorInput  = input.color(sty.FIB_BASE_COLOR, "Fib Base Color", group="Style – Fibonacci")
fibExtUpColInput   = input.color(sty.FIB_EXT_UP_COL, "Fib Extension Up Color", group="Style – Fibonacci")
fibExtDnColInput   = input.color(sty.FIB_EXT_DN_COL, "Fib Extension Down Color", group="Style – Fibonacci")
fibWidthInput      = input.int(sty.FIB_WIDTH, "Fib Line Width", minval=1, group="Style – Fibonacci")
labelSizeOptInput  = input.string(sty.LABEL_SIZE, "Fib Label Size",
                             options=[size.tiny, size.small, size.normal, size.large, size.huge],
                             group="Style – Fibonacci")
labelOffsetInput   = input.int(sty.LABEL_OFFSET, "Label offset (bars)", minval=0)
showGoldenZoneInput = input.bool(true, "Mostrar Zona Dourada", group="Estilo – Fibonacci") 
useAdaptiveGZInput = input.bool(false, "Zona Áurea Adaptativa", group="Estilo – Fibonacci") 
kFactorInput = input.float(0.5, "k Factor", step=0.1, group="Style – Fibonacci") 
atrMultInput = input.float(1.0, "ATR Mult", step=0.1, group="Style – Fibonacci") 

// REFINAMENTO VISUAL: Inputs para controlar os novos elementos gráficos
showPivotMarkersInput = input.bool(true, "Show S/R Pivot Markers", group="Style – Refinements")
showFibAnchorsInput = input.bool(true, "Show Fibonacci Anchors", group="Style – Refinements")

// ─────────────────────────── Estruturas de Dados (UDT) ─────────────────────
const int MAX_SR_ZONES = 30
const int MAX_FIB_LEVELS = 20
const int MAX_CONF_BOXES = 40
const int MAX_TRAIN_SAMPLES = 200

var sru.SR_Zone[] sr_zones = array.new<sru.SR_Zone>()
var fib.FibLevel[] fib_levels = array.new<fib.FibLevel>()
var box[] confBoxes = array.new_box()
var fb.Projector fibProjector = fb.newProjector()
var float[] trainX1 = array.new<float>()
var float[] trainX2 = array.new<float>()
var float[] trainX3 = array.new<float>()
var float[] trainY  = array.new<float>()
// Flag that indicates if the logistic model has been trained for the
// current set of samples.
var bool trained = false
var string prevWeights = ""
var table infoTable = table.new(position.top_right, 6, 2)

f_pushSample(float x1, float x2, float x3, float y) =>
    array.push(trainX1, x1)
    array.push(trainX2, x2)
    array.push(trainX3, x3)
    array.push(trainY,  y)

    if array.size(trainY) > MAX_TRAIN_SAMPLES
        array.shift(trainX1)
        array.shift(trainX2)
        array.shift(trainX3)
        array.shift(trainY)

// Determine which weights will be used for the logistic model. If a comma
// separated string is provided via input, parse it. Otherwise, attempt to
// train using the collected pivot history.
var float finalW0 = logW0Input
var float finalW1 = logW1Input
var float finalW2 = logW2Input
var float finalW3 = 0.0

if useTrainedWeightsInput
    if str.length(weightsStrInput) > 0 and weightsStrInput != prevWeights
        prevWeights := weightsStrInput
        string[] parts = str.split(weightsStrInput, ",")
        if array.size(parts) >= 3
            finalW0 := str.tonumber(array.get(parts, 0))
            finalW1 := str.tonumber(array.get(parts, 1))
            finalW2 := str.tonumber(array.get(parts, 2))
            if array.size(parts) >= 4
                finalW3 := str.tonumber(array.get(parts, 3))
        trained := true
    else if (not trained) and array.size(trainY) > 0
        // Pass the last known weights so training resumes from the current model state.
        lm.TrainResult res = lm.gradientDescent(trainX1, trainX2, trainX3, trainY, trainRateInput, trainEpochsInput, finalW0, finalW1, finalW2, finalW3)
        finalW0 := res.w0
        finalW1 := res.w1
        finalW2 := res.w2
        finalW3 := res.w3
        trained := true
else
    // When not using trained weights, fall back to the user inputs every bar.
    finalW0 := logW0Input
    finalW1 := logW1Input
    finalW2 := logW2Input
    finalW3 := 0.0
    trained := false

// ─────────────────────────── Funções de Gerenciamento ────────────────
// --- Lógica de Mercado ---
rsi = srEnabledInput ? ta.rsi(close, lengthInput) : na
atr = (srEnabledInput or confEnabledInput) ? ta.atr(lengthInput) : na
float volMA = srEnabledInput ? ta.sma(volume, lengthInput) : na

ph = (srEnabledInput or fibEnabledInput) ? pv.pivotHigh(high, lengthInput) : na
pl = (srEnabledInput or fibEnabledInput) ? pv.pivotLow(low, lengthInput) : na
ph_prev = (srEnabledInput or fibEnabledInput) ? pv.pivotHigh(high[1], lengthInput) : na
pl_prev = (srEnabledInput or fibEnabledInput) ? pv.pivotLow(low[1], lengthInput) : na

float confThreshPx = confEnabledInput and not na(atr) ? atr * confThresholdATRInput : na

// Cria uma nova zona S/R com base em um pivô e adiciona ao array global
// --- Estado Global da Origem do Pivô ---
// Flags para marcar se um pivô foi formado na barra atual
bool isPivotHighOrigin = not na(ph) and na(ph_prev)
bool isPivotLowOrigin  = not na(pl) and na(pl_prev)

// --- Lógica de Suporte / Resistência ---
if srEnabledInput
    borderColorRes := color.new(srColorResInput, 75)
    borderColorSup := color.new(srColorSupInput, 75)
    borderColorValid := color.new(srColorValidInput, 50)
    borderColorBroken := color.new(srColorBrokenInput, 85)

    srm.createZone(sr_zones, ph, false, srColorResInput, borderColorRes, rsi, rsiThresholdInput, atr, volMA, close, open, volume, finalW0, finalW1, finalW2, finalW3, probThresholdInput, volatilityBandATRInput, lengthInput, MAX_SR_ZONES)
    srm.createZone(sr_zones, pl, true, srColorSupInput, borderColorSup, rsi, rsiThresholdInput, atr, volMA, close, open, volume, finalW0, finalW1, finalW2, finalW3, probThresholdInput, volatilityBandATRInput, lengthInput, MAX_SR_ZONES)

    var bool retrainNeeded = false
    for zone in sr_zones
        if zone.status != "Broken"
            bool isRetest = zone.isSupport ? low < zone.level and close >= zone.level : high > zone.level and close <= zone.level
            bool isBroken = zone.isSupport ? close < zone.level : close > zone.level
            bool isDominant = math.abs(close - open) > atr or volume > volMA

            if isRetest
                bool validated = sru.handleRetest(zone, retestCountInput, retestProbWeightInput, borderColorValid, srColorValidInput)
                if validated
                    f_pushSample(zone.x1, zone.x2, zone.x3, 1.0)
                    retrainNeeded := true

            if isBroken and isDominant
                bool earlyBreak = sru.markBroken(zone, retestCountInput, borderColorBroken, srColorBrokenInput)
                if earlyBreak
                    f_pushSample(zone.x1, zone.x2, zone.x3, 0.0)
                    retrainNeeded := true
    if retrainNeeded
        trained := false
else
    // Garante que os marcadores não sejam plotados se o subsistema estiver desativado
    isPivotHighOrigin := false
    isPivotLowOrigin := false
    sru.clearZones(sr_zones)

// --- Plotagem dos Marcadores de Pivô ---
// Só plota na barra de formação do pivô
plotshape(bar_index >= lengthInput and srEnabledInput and showPivotMarkersInput and isPivotHighOrigin ? ph : na, title="PH Marker", style=shape.triangledown, location=location.absolute, color=color.new(srColorResInput, 20), size=size.small, offset=0)
plotshape(bar_index >= lengthInput and srEnabledInput and showPivotMarkersInput and isPivotLowOrigin ? pl : na, title="PL Marker", style=shape.triangleup, location=location.absolute, color=color.new(srColorSupInput, 20), size=size.small, offset=0)

// --- Lógica de Fibonacci ---
var float lastHigh = na
var float lastLow = na
var int   lastHighIdx = na
var int   lastLowIdx  = na
var label fibAnchorHighLabel = na
var label fibAnchorLowLabel = na

// Só atualiza âncora quando um novo pivô é formado
if bar_index >= lengthInput

    if isPivotHighOrigin
        lastHigh := ph
        lastHighIdx := bar_index
        if showFibAnchorsInput and fibEnabledInput
            label.delete(fibAnchorHighLabel)
            fibAnchorHighLabel := label.new(bar_index, ph, "⦿", style=sty.ANCHOR_STYLE, textcolor=sty.ANCHOR_TEXT_COLOR, size=sty.ANCHOR_SIZE, tooltip="Âncora Superior Fibonacci")
    if isPivotLowOrigin
        lastLow := pl
        lastLowIdx := bar_index
        if showFibAnchorsInput and fibEnabledInput
            label.delete(fibAnchorLowLabel)
            fibAnchorLowLabel := label.new(bar_index, pl, "⦿", style=sty.ANCHOR_STYLE, textcolor=sty.ANCHOR_TEXT_COLOR, size=sty.ANCHOR_SIZE, tooltip="Âncora Inferior Fibonacci")

if fibEnabledInput and not na(lastHigh) and not na(lastLow) and barstate.isconfirmed
    int startIdx = math.min(lastHighIdx, lastLowIdx)
    fib.drawLevels(fib_levels, startIdx, lastHigh, lastLow, fibBaseColorInput, fibExtUpColInput, fibExtDnColInput, fibWidthInput, labelSizeOptInput, labelOffsetInput)
    float p1 = lastHighIdx < lastLowIdx ? lastHigh : lastLow
    float p2 = lastHighIdx < lastLowIdx ? lastLow : lastHigh
    fb.computeLevels(fibProjector, p1, p2, atr, atrMultInput, useAdaptiveGZInput, kFactorInput)
    fb.draw(fibProjector, startIdx, bar_index, fibBaseColorInput, fibExtUpColInput, color.new(color.yellow, 70), fibWidthInput, labelSizeOptInput, labelOffsetInput)
    if not showGoldenZoneInput and not na(fibProjector.goldBox)
        box.delete(fibProjector.goldBox)
else if not fibEnabledInput
    fib.clearLevels(fib_levels)
    fb.clearDrawings(fibProjector)
    label.delete(fibAnchorHighLabel)
    label.delete(fibAnchorLowLabel)

if confEnabledInput
    if array.size(sr_zones) > 0 and array.size(fib_levels) > 0
        for zone in sr_zones
            if zone.status != "Broken"
                for fibo in fib_levels
                    if math.abs(zone.level - fibo.level) < confThreshPx
                        conf.ConfluenceInput confluenceInput = conf.ConfluenceInput.new(fibo.level, zone.level, zone.probability, atr, fibo.bar_index, zone.retests, retestCountInput, zone.bar_index, 1.0, 50, w1Input, w2Input, w3Input, w4Input, weightSchemeInput, kDistInput, kTempInput)
                        conf.CalculatedWeights result = conf.calculateConfluence(confluenceInput)
                        float score = result.confluence_weight
                        if score > 0
                            color boxBgColor = color.from_gradient(score, 0.5, 1.5, color.green, color.red)
                            string confTooltip = "Confluência: " + str.tostring(score, "#.##") + "\nS/R Nível: " + str.tostring(zone.level) + "\nFib Nível: " + str.tostring(fibo.level) + " (" + str.tostring(fibo.ratio * 100, "#.##") + "%)" + "\nS/R Retestes: " + str.tostring(zone.retests)
                            int boxStart = math.min(zone.bar_index, fibo.bar_index)
                            box confBox = box.new(boxStart, math.max(zone.level, fibo.level), boxStart + confluenceBoxWidthInput, math.min(zone.level, fibo.level), bgcolor=color.new(boxBgColor, 70), border_color=color.new(boxBgColor, 40), text="✨ " + str.tostring(score, "#.##"), text_halign=text.align_center)
                            cb.pushBox(confBoxes, confBox, MAX_CONF_BOXES)
    else
        cb.clearBoxes(confBoxes)
else
    cb.clearBoxes(confBoxes)

if barstate.isfirst
    table.cell(infoTable, 0, 0, "Indicador", bgcolor=sty.LABEL_BG, text_color=sty.LABEL_TEXT_COLOR, text_halign=text.align_center)
    table.cell(infoTable, 0, 1, "Valor", bgcolor=sty.LABEL_BG, text_color=sty.LABEL_TEXT_COLOR, text_halign=text.align_center)

table.cell(infoTable, 1, 0, "RSI")
table.cell(infoTable, 1, 1, str.tostring(rsi, "#.##"))
table.cell(infoTable, 2, 0, "ATR")
table.cell(infoTable, 2, 1, str.tostring(atr, "#.##"))
table.cell(infoTable, 3, 0, "Vol MA")
table.cell(infoTable, 3, 1, str.tostring(volMA, "#.##"))
table.cell(infoTable, 4, 0, "SR Zones")
table.cell(infoTable, 4, 1, str.tostring(array.size(sr_zones)))
table.cell(infoTable, 5, 0, "Fib Levels")
table.cell(infoTable, 5, 1, str.tostring(array.size(fib_levels)))
