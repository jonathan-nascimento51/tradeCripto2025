//@version=6
// =============================================================================
//  Combined S/R + Fib (Volatility Zone v7) - Visual Enhancement
//  ▸ AVALIAÇÃO: Melhoria visual das zonas de volatilidade.
//  ▸ Implementa uma linguagem visual progressiva para o ciclo de vida das zonas:
//    1. Ativa: Sutil, com preenchimento transparente.
//    2. Reteste: Adiciona um rótulo de contagem.
//    3. Validada: Torna-se mais opaca e destacada na cor de validação.
//    4. Rompida: Desvanece, torna-se tracejada e para de se estender.
//  ▸ By: AvaliadorVisualZonasSR (Baseado no original de Trader-Cientista de Dados)
// =============================================================================
import jonathanmoletta17/LogisticRegressionUtils/1 as lr
import jonathanmoletta17/PivotUtils/2 as pv
import jonathanmoletta17/ConfluenceLib/2 as conf

indicator("Combined S/R + Fib (Volatility Zone v7) [Visual+]", "CSFZ_v7_Visual+", overlay = true, max_lines_count = 500, max_labels_count = 300, max_boxes_count = 100)

// ⁕ Subsistemas
srEnabled = input.bool(true, "Enable Support/Resistance", group = "Subsystems")
fibEnabled = input.bool(true, "Enable Fibonacci Extensions", group = "Subsystems")
confEnabled = input.bool(true, "Enable Confluence Zones", group = "Subsystems")

// ⁕ Parâmetros S/R
length = input.int(14, "Pivot Length", group = "Support/Resistance")
probThreshold = input.float(0.7, "Prob Threshold", minval=0, maxval=1, group="Support/Resistance")
retestCount = input.int(1, "Retests to Validate", minval=1, maxval=5, group="Support/Resistance")
volatilityBandATR = input.float(0.15, "Volatility Band Width (ATR)", step=0.05, group="Support/Resistance", tooltip="Largura da zona em múltiplos de ATR. Ex: 0.15 = Nível ± (0.15 * ATR)")

// ⁕ Parâmetros de Confluência
confThresholdATR = input.float(0.25, "Confluence ATR Threshold", group = "Confluence Engine")
w1 = input.float(0.4, "Weight - Distance", group = "Confluence Engine")
w2 = input.float(0.3, "Weight - Signal", group = "Confluence Engine")
w3 = input.float(0.2, "Weight - Retests", group = "Confluence Engine")
w4 = input.float(0.1, "Weight - Temporal", group = "Confluence Engine")

// ⁕ Estilos (inputs de cor, etc. permanecem os mesmos)
// VISUAL UPGRADE: Ajustado a transparência padrão para uma aparência mais limpa.
// Zonas ativas são mais sutis (92%), validadas mais fortes (80%), e rompidas quase invisíveis (95%).
srColorRes = input.color(color.new(color.red, 92), "Resistance (Active Fill)", group = "Style – S/R")
srColorSup = input.color(color.new(color.green, 92), "Support (Active Fill)", group = "Style – S/R")
srColorValid = input.color(color.new(color.orange, 80), "Validated Zone", group = "Style – S/R")
srColorBroken = input.color(color.new(color.gray, 95), "Broken Zone", group = "Style – S/R")
// ... outros inputs de estilo ...
fibBaseColor = input.color(color.new(color.gray, 40), "≤1× Base color", group = "Style – Fib")
fibExtUpCol = input.color(color.new(color.green, 0), ">1× Up color", group = "Style – Fib")
fibExtDnCol = input.color(color.new(color.red, 0), ">1× Down color", group = "Style – Fib")
fibWidth = input.int(1, "Line width", minval = 1, maxval = 4, group = "Style – Fib")
labelSizeOpt = input.string("tiny", "Label size", options = ["tiny", "small", "normal"], group = "Style – Fib")
labelOffset = input.int(2, "Label offset (bars)", minval = 0, group = "Style – Fib")


// ─────────────────────────── Estruturas de Dados (UDT) ─────────────────────
const int MAX_SR_ZONES = 30
const int MAX_FIB_LEVELS = 20
const int MAX_CONF_BOXES = 40

type SR_Zone
    int id
    int bar_index
    line line_upper
    line line_lower
    linefill fill_obj
    label lbl
    float level
    float probability
    bool isSupport
    int retests = 0
    string status = "Active"

type FibLevel
    line ln
    label lbl
    float level
    float ratio
    int bar_index

var SR_Zone[] sr_zones = array.new<SR_Zone>()
var FibLevel[] fib_levels = array.new<FibLevel>()
var box[] confBoxes = array.new_box()

// ─────────────────────────── Funções de Gerenciamento ──────────────────────
f_pushZone(SR_Zone zone) =>
    array.push(sr_zones, zone)
    if array.size(sr_zones) > MAX_SR_ZONES
        SR_Zone oldZone = array.shift(sr_zones)
        line.delete(oldZone.line_upper)
        line.delete(oldZone.line_lower)
        linefill.delete(oldZone.fill_obj)
        label.delete(oldZone.lbl)

f_clearZones() =>
    for z in sr_zones
        line.delete(z.line_upper)
        line.delete(z.line_lower)
        linefill.delete(z.fill_obj)
        label.delete(z.lbl)
    array.clear(sr_zones)

f_clearFibLevels() =>
    for f in fib_levels
        line.delete(f.ln)
        label.delete(f.lbl)
    array.clear(fib_levels)

f_pushBox(box b) =>
    array.push(confBoxes, b)
    if array.size(confBoxes) > MAX_CONF_BOXES
        box old = array.shift(confBoxes)
        box.delete(old)

f_clearBoxes() =>
    for b in confBoxes
        box.delete(b)
    array.clear(confBoxes)

// --- Lógica de Mercado ---
ph = pv.pivotHigh(high, length)
pl = pv.pivotLow(low, length)
rsi = ta.rsi(close, length)
atr = ta.atr(length)

// --- Lógica de Suporte / Resistência ---
if srEnabled
    var float atr_offset = atr * volatilityBandATR

    // VISUAL UPGRADE: Definição de cores para bordas, tornando-as ligeiramente mais fortes que o preenchimento.
    color borderColorRes = color.new(srColorRes, 75)
    color borderColorSup = color.new(srColorSup, 75)
    color borderColorValid = color.new(srColorValid, 60)
    color borderColorBroken = color.new(srColorBroken, 85)

    // CRIAÇÃO de novas zonas de volatilidade (Resistência)
    if not na(ph)
        float prob = lr.logistic(rsi > 50 ? 1:-1, math.abs(close-open) > atr ? 1:-1, 1.0, 1.0, 1.0)
        if prob > probThreshold
            float upper = ph + atr_offset
            float lower = ph - atr_offset
            // VISUAL UPGRADE: Bordas sólidas (width=1) para um look mais moderno.
            line l_u = line.new(bar_index - length, upper, bar_index, upper, color=borderColorRes, extend=extend.right, style=line.style_solid, width=1)
            line l_l = line.new(bar_index - length, lower, bar_index, lower, color=borderColorRes, extend=extend.right, style=line.style_solid, width=1)
            linefill lf = linefill.new(l_u, l_l, color=srColorRes)
            // O rótulo inicial é invisível e será ativado no primeiro reteste.
            label newLbl = label.new(bar_index, ph, "", style=label.style_none)
            f_pushZone(SR_Zone.new(time, bar_index, l_u, l_l, lf, newLbl, ph, prob, false))

    // CRIAÇÃO de novas zonas de volatilidade (Suporte)
    if not na(pl)
        float prob = lr.logistic(rsi > 50 ? 1:-1, math.abs(close-open) > atr ? 1:-1, 1.0, 1.0, 1.0)
        if prob > probThreshold
            float upper = pl + atr_offset
            float lower = pl - atr_offset
            line l_u = line.new(bar_index - length, upper, bar_index, upper, color=borderColorSup, extend=extend.right, style=line.style_solid, width=1)
            line l_l = line.new(bar_index - length, lower, bar_index, lower, color=borderColorSup, extend=extend.right, style=line.style_solid, width=1)
            linefill lf = linefill.new(l_u, l_l, color=srColorSup)
            label newLbl = label.new(bar_index, pl, "", style=label.style_none)
            f_pushZone(SR_Zone.new(time, bar_index, l_u, l_l, lf, newLbl, pl, prob, true))

    // ATUALIZAÇÃO do ciclo de vida das zonas (retestes, validação e quebras)
    for zone in sr_zones
        if zone.status != "Broken"
            isRetest = zone.isSupport ? low < zone.level and close >= zone.level : high > zone.level and close <= zone.level
            isBroken = zone.isSupport ? close < zone.level : close > zone.level
            
            if isRetest
                zone.retests += 1
                // VISUAL UPGRADE: Rótulo mais informativo e visualmente agradável.
                // Aparece no primeiro reteste e atualiza a contagem.
                zone.lbl.set_text(" " + str.tostring(zone.retests) + "x ")
                zone.lbl.set_x(bar_index + 1)
                zone.lbl.set_y(zone.level)
                zone.lbl.set_style(label.style_label_left)
                zone.lbl.set_size(size.tiny)
                zone.lbl.set_color(color.new(color.gray, 20))
                zone.lbl.set_textcolor(srColorValid)

                if zone.retests >= retestCount and zone.status != "Validated"
                    zone.status := "Validated"
                    // VISUAL UPGRADE: Fortalece a zona visualmente ao validar.
                    zone.line_upper.set_color(borderColorValid)
                    zone.line_lower.set_color(borderColorValid)
                    zone.fill_obj.set_color(srColorValid) // Cor mais opaca
                    zone.lbl.set_text(" ✔ Val. ")
                    zone.lbl.set_color(color.new(srColorValid, 25))
                    zone.lbl.set_textcolor(color.white)
            if isBroken
                zone.status := "Broken"
                // VISUAL UPGRADE: "Arquiva" a zona rompida.
                // Torna as bordas tracejadas e cinzas, e remove a extensão futura.
                zone.line_upper.set_color(borderColorBroken)
                zone.line_lower.set_color(borderColorBroken)
                zone.line_upper.set_style(line.style_dashed)
                zone.line_lower.set_style(line.style_dashed)
                zone.fill_obj.set_color(srColorBroken) // Preenchimento quase invisível
                zone.line_upper.set_extend(extend.none)
                zone.line_lower.set_extend(extend.none)
                // Atualiza a posição da linha para terminar na barra de rompimento.
                zone.line_upper.set_x2(bar_index)
                zone.line_lower.set_x2(bar_index)
                // Rótulo de rompimento.
                zone.lbl.set_text(" B ")
                zone.lbl.set_x(bar_index)
                zone.lbl.set_textcolor(srColorBroken)
                zone.lbl.set_color(color.new(color.gray, 80))

// --- Lógica de Fibonacci ---
var float lastHigh = na
var float lastLow = na
if not na(ph)
    lastHigh := ph
if not na(pl)
    lastLow := pl
if fibEnabled and not na(lastHigh) and not na(lastLow) and barstate.isconfirmed
    f_clearFibLevels()
    float diff = math.abs(lastHigh - lastLow)
    bool isUp = lastHigh > lastLow
    float[] ratios = array.from(0.236, 0.382, 0.5, 0.618, 0.786, 1.0, 1.272, 1.414, 1.618, 2.0)
    for idx = 0 to array.size(ratios) - 1
        float r = array.get(ratios, idx)
        float y = isUp ? lastHigh + diff * r : lastLow - diff * r
        bool isExt = r > 1.0
        color lnCol = isExt ? (isUp ? fibExtUpCol : fibExtDnCol) : fibBaseColor
        line ln = line.new(bar_index, y, bar_index + 1, y, color=lnCol, style=isExt ? line.style_solid : line.style_dotted, width=fibWidth, extend=extend.right)
        string lblTxt = str.tostring(r * 100, "#.##") + "% → " + str.tostring(y, format.mintick)
        label lb = label.new(bar_index + (idx % 2 == 0 ? labelOffset : -labelOffset), y, text=lblTxt, xloc=xloc.bar_index, style=idx % 2 == 0 ? label.style_label_left : label.style_label_right, color=color.new(lnCol, 80), textcolor=lnCol, size=labelSizeOpt)
        array.push(fib_levels, FibLevel.new(ln, lb, y, r, bar_index))
else if not fibEnabled
    f_clearFibLevels()

// --- MOTOR DE CONFLUÊNCIA ---
if confEnabled and srEnabled and fibEnabled
    if barstate.isconfirmed
        f_clearBoxes()
        if array.size(sr_zones) > 0 and array.size(fib_levels) > 0
            for zone in sr_zones
                if zone.status != "Broken"
                    for fib in fib_levels
                        if math.abs(zone.level - fib.level) < atr * confThresholdATR
                            conf.ConfluenceInput confluenceInput = conf.ConfluenceInput.new(fib.level, zone.level, zone.probability, atr, fib.bar_index, zone.retests, retestCount, zone.bar_index, 1.0, 50, w1, w2, w3, w4)
                            conf.CalculatedWeights result = conf.calculateConfluence(confluenceInput)
                            float score = result.confluence_weight
                            if score > 0
                                color boxBgColor = color.from_gradient(score, 0.5, 1.5, color.yellow, color.purple)
                                box confBox = box.new(bar_index, math.max(zone.level, fib.level), bar_index + 20, math.min(zone.level, fib.level), bgcolor=color.new(boxBgColor, 70), border_color=color.new(boxBgColor, 40), text="Conf: " + str.tostring(score, "#.##"), text_halign=text.align_center)
                                f_pushBox(confBox)
else
    f_clearBoxes()