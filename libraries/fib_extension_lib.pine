//@version=6

// Utility functions for drawing Fibonacci extension levels
library("FibExtensionLib", true)

// Defines the FibLevel structure used to track drawn Fibonacci lines and labels
export type FibLevel
    line  ln          // Reference to the drawn Fibonacci line
    label lbl         // Label associated with the level
    float level       // Price value of the level
    float ratio       // Fibonacci ratio used
    int   bar_index   // Pivot bar index where the level originates

// ───────── Utilidades internas (não-exportadas) ─────────
_ratios() =>
    // Creates a fresh array with all standard Fibonacci ratios.
    // Keeping it as a function avoids persistent state.
    array.from(0.236, 0.382, 0.5, 0.618, 0.786,
               1.0, 1.272, 1.414, 1.618, 2.0)

// ───────── API pública ─────────

// ① Getter seguro: sempre devolve um novo array, sem capturar global
export getRatios() => _ratios()

// -----------------------------------------------------------------------------
// calcLevel
// Returns the price level for the given Fibonacci ratio.
// -----------------------------------------------------------------------------
export calcLevel(float lastHigh, float lastLow, float diff, bool isUp, float ratio) =>
    // Determine the correct orientation based on the swing direction
    float endPrice = isUp ? lastHigh : lastLow
    float sign = isUp ? 1 : -1
    ratio <= 1 ? endPrice - sign * diff * ratio : endPrice + sign * diff * (ratio - 1)

// -----------------------------------------------------------------------------
// createLine
// Draws a single horizontal line for a Fibonacci level.
// -----------------------------------------------------------------------------
export createLine(int barIndex, float y, color lnCol, bool isExt, int width) =>
    line.new(barIndex, y, barIndex + 1, y,
             color=lnCol,
             style=isExt ? line.style_solid : line.style_dotted,
             width=width,
             extend=extend.right)

// -----------------------------------------------------------------------------
// createLabel
// Places a label near the Fibonacci line with the level price and ratio.
// -----------------------------------------------------------------------------
export createLabel(int barIndex, float y, float ratio, bool leftSide, color lnCol, string lblSize, int lblOffset) =>
    string lblTxt = str.tostring(ratio * 100, "#.##") + "% → " + str.tostring(y, format.mintick)
    label.new(barIndex + (leftSide ? lblOffset : -lblOffset), y,
              text=lblTxt,
              xloc=xloc.bar_index,
              style=leftSide ? label.style_label_left : label.style_label_right,
              color=color.new(lnCol, 80),
              textcolor=lnCol,
              size=lblSize)

// -----------------------------------------------------------------------------
// clearLevels
// Deletes all lines and labels stored in the array and empties it.
// -----------------------------------------------------------------------------
export clearLevels(FibLevel[] levels) =>
    for f in levels
        line.delete(f.ln)
        label.delete(f.lbl)
    array.clear(levels)

// -----------------------------------------------------------------------------
// drawLevels
// Creates Fibonacci extension lines based on the provided high and low values.
// Results are stored in the passed array.
// -----------------------------------------------------------------------------
export drawLevels(
    FibLevel[] levels,
    int startIndex,            // pivot bar index where the Fib originates
    float lastHigh,
    float lastLow,
    color baseColor,
    color extUpColor,
    color extDnColor,
    int width,
    string lblSize,
    int lblOffset
) =>
    clearLevels(levels)
    float diff = math.abs(lastHigh - lastLow)
    bool isUp  = lastHigh > lastLow
    float[] ratios = _ratios()           // call once to reuse inside the loop
    for idx = 0 to array.size(ratios) - 1
        float r = array.get(ratios, idx)
        float y = calcLevel(lastHigh, lastLow, diff, isUp, r)
        bool isExt = r > 1.0
        color lnCol = isExt ? (isUp ? extUpColor : extDnColor) : baseColor
        line ln = createLine(startIndex, y, lnCol, isExt, width)
        label lb = createLabel(startIndex, y, r, idx % 2 == 0, lnCol, lblSize, lblOffset)
        array.push(levels, FibLevel.new(ln, lb, y, r, startIndex))
