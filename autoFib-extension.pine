//@version=6
indicator("Auto Fib Extension Refatorado", overlay=true)

// === INPUTS ===
// Pivot settings
depth        = input.int(10, "Pivot Depth", minval=2, tooltip="Bar depth for pivot detection")
reverse      = input.bool(false, "Reverse Direction", inline="Rev")

// Line extension
extendLeft   = input.bool(false, "Extend Left", inline="Ext")
extendRight  = input.bool(true,  "Extend Right", inline="Ext")
extendMode   = extend.none
if      extendLeft and extendRight
    extendMode := extend.both
else if extendLeft
    extendMode := extend.left
else if extendRight
    extendMode := extend.right

// Display options
showPrices   = input.bool(true,  "Show Prices")
showLevels   = input.bool(true,  "Show Levels")
labelPos     = input.string("Left", "Labels Position", options=["Left","Right"])
valueFormat  = input.string("Values", "Levels Format", options=["Values","Percent"])
alphaBg      = input.int(85,   "Background Transparency", minval=0, maxval=100)

// Thresholds
upperThresh  = input.float(0.236, "Upper Ratio Threshold")
lowerThresh  = input.float(1.0,   "Lower Ratio Threshold")

// Fibonacci ratios and colors
fibRatios = array.from(0.0, 0.236, 0.382, 0.5, 0.618, 0.786, 1.0, 1.618)
fibColors = array.from(color.new(color.blue,     alphaBg),color.new(color.teal,     alphaBg),color.new(color.green,    alphaBg),color.new(color.yellow,   alphaBg),color.new(color.orange,   alphaBg),color.new(color.fuchsia,  alphaBg),color.new(color.gray,     alphaBg),color.new(color.red,      alphaBg))

// === UTILS ===
// Draw a line or update existing
f_drawLine(_price, _col, _lastLine) =>
    var line newLine = na
    if na(_lastLine)
        newLine := line.new(time, _price, time, _price, color=_col, width=1, extend=extendMode, xloc=xloc.bar_time)
    else
        line.set_xy1(_lastLine, line.get_x1(_lastLine), _price)
        line.set_xy2(_lastLine, line.get_x2(_lastLine), _price)
        newLine := _lastLine
    newLine

// Draw a label or update existing
f_drawLabel(_price, _text, _col, _refLine) =>
    if na(_price)
        na
    x = labelPos == "Left" ? line.get_x1(_refLine) : line.get_x2(_refLine)
    style = labelPos == "Left" ? label.style_label_right : label.style_label_left
    align = labelPos == "Left" ? text.align_right : text.align_left
    textFmt = labelPos == "Left" ? _text + "\n" : "       " + _text + "\n"
    var label lbl = label.new(x, _price, textFmt, textcolor=_col, style=style, textalign=align, color=#00000000, xloc=xloc.bar_time)
    label.set_xy(lbl, x, _price)
    label.set_text(lbl, textFmt)
    lbl

// === PIVOT & FIB CALCULATION ===
f_calculate() =>
    // Detect pivot: simplistic high/low comparisonâ€”replace with custom logic if needed
    isHighPivot = na(ta.pivothigh(high, depth, depth))
    isLowPivot  = na(ta.pivotlow(low, depth, depth))

    // Track last pivot prices
    var float lastHigh = na
    var float lastLow  = na
    if isHighPivot
        lastHigh := high[depth]
    if isLowPivot
        lastLow  := low[depth]

    // Determine start/end for fib
    pivotHigh = lastHigh
    pivotLow  = lastLow
    isHighLast = na(pivotHigh) == false and pivotHigh > pivotLow

    startP = isHighLast ? pivotHigh : pivotLow
    endP   = isHighLast ? pivotLow  : pivotHigh
    diff   = math.abs(startP - endP)

    // Validate threshold
    valid = isHighLast ? (pivotLow < endP - diff * lowerThresh or pivotLow > endP - diff * upperThresh) : (pivotHigh > endP + diff * lowerThresh or pivotHigh < endP + diff * upperThresh)

    if valid
        [endP, diff]
    else
        [na, na]

[endPrice, span] = f_calculate()

if barstate.islast and na(endPrice)
    runtime.error("Dados insuficientes para calcular Auto Fib Extension. Ajuste o depth ou timeframe.")

// === DRAW FIB LEVELS ===
var line lastLine = na
var label lastLbl = na
if not na(endPrice) and showLevels
    for i = 0 to array.size(fibRatios) - 1
        ratio = array.get(fibRatios, i)
        lvl   = endPrice + span * ratio
        col   = array.get(fibColors, i)

        // draw lines
        lastLine := f_drawLine(lvl, col, lastLine)

        // draw labels
        if showPrices
            txt = valueFormat == "Percent" ? str.tostring(ratio * 100, "#.#") + "%" : str.tostring(lvl, "#.##")
            lastLbl := f_drawLabel(lvl, txt, col, lastLine)
