//@version=6
indicator('Logistic Model Test', overlay=false)
import "../libraries/logistic_model_lib.pine" as lm

// Simple hardcoded training data
float[] x1 = array.from(1.0, -1.0, 1.0, -1.0)
float[] x2 = array.from(1.0, 1.0, -1.0, -1.0)
float[] x3 = array.from(1.0, 1.0, 1.0, -1.0)
float[] y  = array.from(1.0, 0.0, 1.0, 0.0)

// Start training from small non-zero weights to demonstrate the optional parameters.
lm.TrainResult res = lm.gradientDescent(x1, x2, x3, y, 0.1, 20, 0.2, -0.1, 0.05, 0.0)

// Plot training loss to visually confirm descent
plot(res.loss, title='Training Loss')

// Show PASS label when loss is finite and weights are valid
bool ok = math.isfinite(res.loss) and not na(res.w0) and not na(res.w1) and not na(res.w2) and not na(res.w3)
if ok
    label.new(bar_index, res.loss, 'PASS', style=label.style_label_up, color=color.green)

// Expected output: 'Training Loss' line plus a green 'PASS' label if training succeeded