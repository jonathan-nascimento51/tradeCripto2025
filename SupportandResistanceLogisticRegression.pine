//@version=6
// =============================================================================
//  Support & Resistance - Logistic Regression
//  Standalone indicator derived from the original logistic regression model.
//  ▸ AVALIAÇÃO: Refinamento visual com foco em clareza e contexto.
//  ▸ By: RefinadorVisualZonasPine
// =============================================================================
import jonathanmoletta17/LogisticModelLib/1 as lm
import jonathanmoletta17/SRZoneUtils/1 as sru
import jonathanmoletta17/PivotUtils/2 as pv
import jonathanmoletta17/StyleLib/4 as sty

indicator("Support/Resistance Logistic Regression", "SR_LogReg", overlay=true, max_lines_count=500, max_labels_count=300)

// Declarar cores globalmente (serão atualizadas via StyleLib)
var color borderColorRes = na
var color borderColorSup = na
var color borderColorValid = na
var color borderColorBroken = na

// ⁕ Subsistemas
srEnabled = input.bool(true, "Enable Support/Resistance", group="Subsystems")

// ⁕ Parâmetros S/R
length = input.int(14, "Pivot Length", group="Support/Resistance")
probThreshold = input.float(0.7, "Prob Threshold", minval=0, maxval=1, group="Support/Resistance")
retestCount = input.int(1, "Retests to Validate", minval=1, maxval=5, group="Support/Resistance")
volatilityBandATR = input.float(0.15, "Volatility Band Width (ATR)", step=0.05, group="Support/Resistance", tooltip="Largura da zona em múltiplos de ATR. Ex: 0.15 = Nível ± (0.15 * ATR)")
rsiThreshold = input.float(50, "RSI Threshold", group="Support/Resistance")
logW0 = input.float(1.0, "Logistic Weight 0", group="Support/Resistance")
logW1 = input.float(1.0, "Logistic Weight 1", group="Support/Resistance")
logW2 = input.float(1.0, "Logistic Weight 2", group="Support/Resistance")
useTrainedWeights = input.bool(false, "Use Trained Weights", group="Support/Resistance")
weightsStr = input.string("", "External Weights w0,w1,w2", group="Support/Resistance", tooltip="Opcional: insira pesos separados por vírgula. Deixe em branco para treinar com o histórico.")
trainRate = input.float(0.05, "Train Learning Rate", minval=0.001, step=0.001, group="Support/Resistance")
trainEpochs = input.int(50, "Train Epochs", minval=1, group="Support/Resistance")


// ⁕ Estilos – S/R (valores padrão via StyleLib)
srColorRes    = input.color(sty.SR_COLOR_RES,    "Resistance (Active Fill)", group="Style – S/R")
srColorSup    = input.color(sty.SR_COLOR_SUP,    "Support (Active Fill)",  group="Style – S/R")
srColorValid  = input.color(sty.SR_COLOR_VALID,  "Validated Zone",       group="Style – S/R")
srColorBroken = input.color(sty.SR_COLOR_BROKEN, "Broken Zone",          group="Style – S/R")

// REFINAMENTO VISUAL: Inputs para controlar os novos elementos gráficos
showPivotMarkers = input.bool(true, "Show S/R Pivot Markers", group="Style – Refinements")

// ─────────────────────────── Estruturas de Dados (UDT) ─────────────────────
const int MAX_SR_ZONES = 30
const int MAX_TRAIN_SAMPLES = 200

var sru.SR_Zone[] sr_zones = array.new<sru.SR_Zone>()

var float[] trainX1 = array.new<float>()
var float[] trainX2 = array.new<float>()
var float[] trainY  = array.new<float>()
// Indicates if the model has already been trained for the current dataset.
var bool trained = false

f_pushSample(float x1, float x2, float y) =>
    array.push(trainX1, x1)
    array.push(trainX2, x2)
    array.push(trainY,  y)
    if array.size(trainY) > MAX_TRAIN_SAMPLES
        array.shift(trainX1)
        array.shift(trainX2)
        array.shift(trainY)

// Determine which weights will be used for the logistic model. If a comma
// separated string is provided via input, parse it. Otherwise, attempt to
// train using the collected pivot history.
var float finalW0 = logW0
var float finalW1 = logW1
var float finalW2 = logW2

if useTrainedWeights
    if str.length(weightsStr) > 0
        string[] parts = str.split(weightsStr, ",")
        if array.size(parts) >= 3
            finalW0 := str.tonumber(array.get(parts, 0))
            finalW1 := str.tonumber(array.get(parts, 1))
            finalW2 := str.tonumber(array.get(parts, 2))
        trained := true
    else if (not trained) and array.size(trainY) > 0
        lm.TrainResult res = lm.gradientDescent(trainX1, trainX2, trainY, trainRate, trainEpochs)
        finalW0 := res.w0
        finalW1 := res.w1
        finalW2 := res.w2
        trained := true
else
    finalW0 := logW0
    finalW1 := logW1
    finalW2 := logW2
    trained := false

// ─────────────────────────── Funções de Gerenciamento ────────────────
// --- Lógica de Mercado ---
ph = pv.pivotHigh(high, length)
pl = pv.pivotLow(low, length)
rsi = ta.rsi(close, length)
atr = ta.atr(length)

// Cria uma nova zona S/R com base em um pivô e adiciona ao array global
f_createZone(float level, bool isSupport, color fillColor, color borderColor) =>
    float x1 = rsi > rsiThreshold ? 1 : -1
    float x2 = math.abs(close - open) > atr ? 1 : -1
    float prob = lm.logistic(x1, x2, finalW0, finalW1, finalW2)
    float pivAtr   = atr[length]

    if prob > probThreshold
        float atr_offset_local = pivAtr * volatilityBandATR
        float upper = level + atr_offset_local
        float lower = level - atr_offset_local
        line l_u = line.new(bar_index - length, upper, bar_index, upper, color=borderColor, extend=extend.right, style=line.style_solid, width=1)
        line l_l = line.new(bar_index - length, lower, bar_index, lower, color=borderColor, extend=extend.right, style=line.style_solid, width=1)
        linefill lf = linefill.new(l_u, l_l, color=fillColor)
        label newLbl = label.new(bar_index, level, "", style=label.style_none)
        sru.f_pushZone(sr_zones, sru.SR_Zone.new(bar_index, l_u, l_l, lf, newLbl, level, prob, x1, x2, isSupport), MAX_SR_ZONES)

// --- Estado Global da Origem do Pivô ---
// Flags para marcar se um pivô foi formado na barra atual
bool isPivotHighOrigin = not na(ph) and na(pv.pivotHigh(high[1], length))
bool isPivotLowOrigin  = not na(pl) and na(pv.pivotLow(low[1], length))

// --- Lógica de Suporte / Resistência ---
if srEnabled
    borderColorRes := color.new(srColorRes, 75)
    borderColorSup := color.new(srColorSup, 75)
    borderColorValid := color.new(srColorValid, 50)
    borderColorBroken := color.new(srColorBroken, 85)

    if not na(ph)
        f_createZone(ph, false, srColorRes, borderColorRes)

    if not na(pl)
        f_createZone(pl, true, srColorSup, borderColorSup)

    for zone in sr_zones
        if zone.status != "Broken"
            bool isRetest = zone.isSupport ? low < zone.level and close >= zone.level : high > zone.level and close <= zone.level
            bool isBroken = zone.isSupport ? close < zone.level : close > zone.level
            
            if isRetest
                bool validated = sru.f_handleRetest(zone, retestCount, borderColorValid, srColorValid)
                if validated
                    f_pushSample(zone.x1, zone.x2, 1.0)
                    trained := false

            if isBroken
                bool earlyBreak = sru.f_markBroken(zone, retestCount, borderColorBroken, srColorBroken)
                if earlyBreak
                    f_pushSample(zone.x1, zone.x2, 0.0)
                    trained := false
else
    // Garante que os marcadores não sejam plotados se o subsistema estiver desativado
    isPivotHighOrigin := false
    isPivotLowOrigin := false

// --- Plotagem dos Marcadores de Pivô ---
// Só plota na barra de formação do pivô
plotshape(bar_index >= length and srEnabled and showPivotMarkers and isPivotHighOrigin ? ph : na, 
          title="PH Marker", style=shape.triangledown, location=location.absolute, 
          color=color.new(borderColorRes, 70), size=size.tiny, offset=0)
plotshape(bar_index >= length and srEnabled and showPivotMarkers and isPivotLowOrigin ? pl : na, 
          title="PL Marker", style=shape.triangleup, location=location.absolute, 
          color=color.new(borderColorSup, 70), size=size.tiny, offset=0)
