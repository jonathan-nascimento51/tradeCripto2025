//@version=6
library("LogisticModelLib", overlay=false)

// -----------------------------------------------------------------------------
// Basic logistic function used by the model
// -----------------------------------------------------------------------------
export logistic(float x1, float x2, float w0, float w1, float w2) =>
    float z = w0 + w1 * x1 + w2 * x2
    float zClamped = math.min(math.max(z, -50), 50)
    1.0 / (1.0 + math.exp(-zClamped))

// -----------------------------------------------------------------------------
// Logistic regression loss utility
// -----------------------------------------------------------------------------
export logLoss(float y, float p) =>
    float eps = 1e-10
    float safeP = math.max(eps, math.min(p, 1 - eps))
    -y * math.log(safeP) - (1.0 - y) * math.log(1.0 - safeP)

// -----------------------------------------------------------------------------
// Result object returned by the training function
// -----------------------------------------------------------------------------
export type TrainResult
    float w0
    float w1
    float w2
    float loss

// -----------------------------------------------------------------------------
// gradientDescent
// Executes simple gradient descent on the logistic regression model.
// -----------------------------------------------------------------------------
export gradientDescent(float[] x1, float[] x2, float[] y, float rate, int epochs) =>
    int n = math.min(array.size(x1), math.min(array.size(x2), array.size(y)))
    float w0 = 0.0
    float w1 = 0.0
    float w2 = 0.0
    float loss = na
    for ep = 0 to epochs - 1
        float epochLoss = 0.0
        for i = 0 to n - 1
            float f1 = array.get(x1, i)
            float f2 = array.get(x2, i)
            float label = array.get(y, i)
            float pred = logistic(f1, f2, w0, w1, w2)
            float error = pred - label
            w0 -= rate * error
            w1 -= rate * error * f1
            w2 -= rate * error * f2
            epochLoss += logLoss(label, pred)
        if n > 0
            epochLoss /= n
        loss := epochLoss
    TrainResult.new(w0, w1, w2, loss)
